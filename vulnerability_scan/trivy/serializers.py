from django.core import serializers
import json
from .models import TrivyConfig


def create_trivy_config_entry_in_db(scan_details):
    try:
        TrivyConfig.objects.create(            
            image_scan=scan_details["image_scan"],
            organization=scan_details["organization"]
            )
    except Exception as e:
        print("Error creating vulnerablity_scan details in DB \n{}".format(e))

def get_trivy_details(organization=None):
    """returns instnace details based on vulnerablity_scan if it exits in db 
    else return None 
    """
    try:
        data = json.loads(serializers.serialize('json', TrivyConfig.objects.filter(
            organization=organization),
            fields=(
                "image_scan",
                "organization",
                "returncode",
                )
            )
        )
        if len(data) !=0:
            for trivy_obj in data:

                if trivy_obj["fields"]["organization"] == organization :
                    temp_dict_obj=trivy_obj["fields"]
                    return  temp_dict_obj
        return {}
    except Exception as e:
        print("Exception--> {}".format(e))
        return {}

def update_trivy_details(scan_details):
    try:
        if len(scan_details) != 0:
            TrivyConfig.objects.filter(organization=scan_details["organization"]).update(**scan_details)
    except Exception as e:
        print("Error updating instance details \n{}".format(e))