import logging
import subprocess


class TrivyExecutable(object):

    PATH = 'executable_path'

    def __init__(self, executable_path=None, config=None):
        """

        :param machine_readable:
        :param config:
        """
        self.log = logging.getLogger(self.__class__.__name__)
        # default configuration
        self.configuration = {
            'stdout': subprocess.PIPE,
            'stderr': subprocess.PIPE,
            TrivyExecutable.PATH: '/usr/local/trivy'
        }

        # add overrides
        if executable_path:
            self.configuration[TrivyExecutable.PATH] = executable_path

        if config:
            self.configuration.update(config)

    def image(self, image_uri, **kwargs):
        return self.execute_cmd("image", image_uri, **kwargs)


    def version(self, **kwargs):
        """

        :param kwargs:
        :return:
        """
        return self.execute_cmd("version", **kwargs)

    @staticmethod
    def _explode_args(**kwargs):
        exploded = list()
        for (key, value) in kwargs.items():
            if '_' in key:
                key = key.replace("_", "-")
            if value is True:
                exploded.append("-{}".format(key))
            elif isinstance(value, dict):
                for (k, v) in value.items():
                    exploded.append("-{}".format(key))
                    exploded.append("{}={}".format(k, v))
            else:
                exploded.append("-{}={}".format(key, value))

        return exploded

    def execute_cmd(self, trivy_cmd,target, **kwargs):
        cmd_args = list()
        cmd_args.append(self.configuration[TrivyExecutable.PATH])
        cmd_args.append(trivy_cmd)
        cmd_args.append(target)

        cmd_args.extend(self._explode_args(**kwargs))



        p = subprocess.Popen(cmd_args, stdin=subprocess.PIPE,
                             stdout=self.configuration['stdout'], stderr=self.configuration['stderr'])
        out, err = p.communicate()

        return p.returncode, out, err