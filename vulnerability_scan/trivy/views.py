from django.shortcuts import render
from django.http import HttpResponse,JsonResponse
from django.http import HttpResponse, JsonResponse
from .utils import *
import json,base64
from .status import *
from django.views.decorators.csrf import csrf_exempt
from .serializers import *
from .trivy_execution import *

# Create your views here.

@csrf_exempt
def get_scan_result():
    pass

@csrf_exempt
def scan_target(request):
    """
    request
    {
        organization: "straw-hats",
        "target": "image",
        "details": {
            image_uri: ""
        }

    }

    response

    {
        organization: "straw-hats",
        "target": "image",
        "details": {
            image_uri: "",
            scan_result: ""
        }

    }

    """
    try: 
        if request.method == "POST" :
            data =json.loads(request.body.decode("utf-8"))
            _temp_request_obj ={}
            _temp_request_obj.update(data)
            organization=data["organization"]
            target=data["target"]

            if target == "image":
                image_uri=data['details']["image_uri"]
                check_data=check_image_scan_existence(data)

                if check_data["statuscode"] != 1005:

                    image_data= get_trivy_image_details(
                                    organization=organization,
                                    image_uri=image_uri
                        )

                    _temp_request_obj['details'].update(image_data)

                    return JsonResponse(_temp_request_obj)
                else:
                    create_trivy_image_config_entry_in_db(data)
                    intiate_vulnerabilty_scan.delay(data)
                    _temp_request_obj['details'].update(
                        {
                            'statuscode': 1000,
                            'message' : STATE[1000]

                        }
                    )

                    return  JsonResponse(_temp_request_obj)
        else:
            return JsonResponse({"message":"invalid request {}".format(request.method)})
    except Exception as e:
        print("Error in scan_target view \nerror-->{}".format(e))
        data =json.loads(request.body.decode("utf-8"))
        response = data['details'].update(
            {
                'statuscode': 1003,
                'message' : STATE[1003]
    
            }
        )

        return JsonResponse(response)