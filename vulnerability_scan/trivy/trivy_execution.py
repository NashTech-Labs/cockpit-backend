import os, sys, traceback,json
from .trivy import TrivyExecutable
from vulnerability_scan.celery import app
from .serializers import *
from .status import STATE


_trivy_path=os.environ.get("TRIVY_PATH")
_trivy_exec = TrivyExecutable(executable_path=_trivy_path)

def scan_image(scan_details):
    """
    scan_details: {
        imageUri: "alphine",
        organization: "",
        result: {}
    }

    {
        organization: "straw-hats",
        "target": "image",
        "details": {
            image_uri: ""
        }

    }  
    """
    imageUri=scan_details['details']['image_uri']
    organization=scan_details['organization']

    if len(imageUri) != 0 and len(organization) != 0 :

        (returncode, out, err) = _trivy_exec.image(imageUri, f='json')

        scan_result = out.decode("utf-8")

        if returncode == 0 :
            scan_result_json = json.loads(scan_result)
            return {

                'imageUri': imageUri,
                'result': scan_result_json,
                'returncode': returncode,
                'organization' : organization

            }
        else:
            scan_result_json = {
                'error': err.decode("utf-8")
            }
            return {

                'imageUri': imageUri,
                'result': scan_result_json,
                'returncode': returncode,
                'organization' : organization

            }          
@app.task
def intiate_vulnerabilty_scan(scan_details):
    """

    {
        organization: "straw-hats",
        "target": "image",
        "details": {
            image_uri: ""
        }

    }    
    """
    temp_data={}

    if  scan_details['target'] == 'image':

        update_trivy_image_details(
            {
            'organization': scan_details['organization'],
            'image_uri': scan_details['image_uri'],
            'statuscode': 1000,
            'message': STATE[1000]

            }
        )
        data = scan_image(scan_details)
        if data['returncode'] == 0:

            temp_data.update(
                {
                    'returncode': data['returncode'],
                    'image_scan' : data['result'],
                    'organization' : data['organization'],
                    'image_uri': data['imageUri'],
                    'statuscode': 1001,
                    'message' : STATE[1001]
                    
                }
            )

        else:
            
            temp_data.update(
                {
                    'returncode': data['returncode'],
                    'image_scan' : data['result'],
                    'organization' : data['organization'],
                    'image_uri': data['imageUri'],
                    'statuscode': 1003,
                    'message' : STATE[1003]
                    
                }
            )            
            

        update_trivy_image_details(temp_data)
    
    if scan_details['target'] == 'kubernetes':
        pass
    



    
            



