import os, sys, traceback,json
from .trivy import TrivyExecutable
from vulnerability_scan.celery import app
from .serializers import *


_trivy_path=os.environ.get("TRIVY_PATH")
_trivy_exec = TrivyExecutable(executable_path=_trivy_path)

def scan_image(scan_details):
    """
    scan_details: {
        imageUri: "alphine",
        organization: "",
        result: {}
    }
    """
    imageUri=scan_details['imageUri']
    organization=scan_details['organization']
    if len(imageUri) != 0 and len(organization) != 0 :

        (returncode, out, err) = _trivy_exec.image(imageUri, f='json')

        scan_result = out.decode("utf-8")

        if returncode == 0 :
            scan_result_json = json.loads(scan_result)
            return {

                'imageUri': imageUri,
                'result': scan_result_json,
                'returncode': returncode,
                'organization' : organization

            }
        else:
            scan_result_json = {
                'error': err.decode("utf-8")
            }
            return {

                'imageUri': imageUri,
                'result': scan_result_json,
                'returncode': returncode,
                'organization' : organization

            }          
@app.task
def get_vulnerabilty_results(scan_details):
    """
    scan_details: {
        imageUri: "alphine",
        organization: "",
        result: {}
        imageScan: "true",
        k8sScan: "true"
    }
    """
    temp_data={}

    if  scan_details['imageScan'] == 'true':
        data = scan_image(scan_details)
        temp_data.update(
            {
                'returncode': data['returncode'],
                'image_scan' : data['result'],
                'organization' : data['organization'],
                'image_uri': data['imageUri']
            }
        )
        update_trivy_details(temp_data)
    
    if scan_details['k8sScan'] == 'true':
        pass
    



    
            



